<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java语言基础</title>
      <link href="2021/07/17/java-yu-yan-ji-chu/"/>
      <url>2021/07/17/java-yu-yan-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="2-1"><a href="#2-1" class="headerlink" title="2.1"></a>2.1</h1><p>1、数据类型<br><a href="https://imgtu.com/i/WpeVOg"><img src="https://z3.ax1x.com/2021/07/10/WpeVOg.png" alt="WpeVOg.png"></a></p><p>文本型（字符串类型）：</p><ul><li>用’’表示，占两个字节，Unicode编码</li></ul><p>布尔型：</p><ul><li>缺省为false</li><li>取值只为两种 true或者 false</li><li>注意：不可以用注意：不可以0或非0的整数替代true和false</li></ul><p>整型：</p><ul><li>有固定表数范围和字段长度<br>  byte 1</li></ul><table><thead><tr><th>类型</th><th>占用空间</th></tr></thead><tbody><tr><td>byte</td><td>1字节</td></tr><tr><td>short</td><td>2字节</td></tr><tr><td>int</td><td>4字节</td></tr><tr><td>long</td><td>8字节</td></tr></tbody></table><ul><li>java整型是int类型 声明long型常量使用L<ul><li>long k = 9562155L</li><li>long k = 9562155（错误）</li><li>如果一个比较大的整数（超出int表数范围），Java不会自动把它当成long处理</li></ul></li></ul><h2 id="浮点型："><a href="#浮点型：" class="headerlink" title="浮点型："></a>浮点型：</h2><pre><code>单精度 :4个字节双精度:8个字节默认常量为double （双精度加D）float f = 3.14f；</code></pre><h2 id="基本数据类型："><a href="#基本数据类型：" class="headerlink" title="基本数据类型："></a>基本数据类型：</h2><pre><code>1、数字之间自由使用下划线2、整型、浮点均可使用dou pi =3.14_15_26</code></pre><p>“引用”是指向一个对象在内存中的位置</p><p>例子： String s1=”a string”</p><h1 id="2-2"><a href="#2-2" class="headerlink" title="2.2"></a>2.2</h1><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符:"></a>标识符:</h2><pre><code>1、什么是标识符？ - 用来表示变量名、类名、方法名、数组名和文件名 - 有效的字符序列2、命名规则 - 字母、数字 _ $ 组合而成 - 以字母、下划线或美元符号开头，不能以数字开头 - 类名首字母大学，如String - 变量、方法及对象的首字母小写 - 的、常量大写所有字母 - Java包全部小写</code></pre><p>什么是关键字</p><ul><li>是指被系统所保留使用的标识符：如print、int</li></ul><h1 id="2-3"><a href="#2-3" class="headerlink" title="2.3"></a>2.3</h1><p>1、什么是变量</p><ul><li>在程序的运行过程中数值可变</li><li>先声明后使用</li></ul><p>2、变量的声明</p><ul><li>用分号（英文状态下）结束</li><li>语法：类型 变量名 =初始值，变量名 = 初始值</li><li>如 int min=10;</li></ul><p>3、作用域与生存周期</p><ul><li><p>程序块：被包括在一对{ }中</p></li><li><p>一个程序块定义一个作用域</p></li><li><p>如<br><a href="https://imgtu.com/i/WpIIRU"><img src="https://z3.ax1x.com/2021/07/11/WpIIRU.png" alt="WpIIRU.png"></a><br>作用域：{</p><pre><code>  &#125;</code></pre></li></ul><p>4、常量</p><ul><li>程序运行过程中都不会改变</li><li>与变量形式基本一致，前面加关键词final</li><li>常量标识符全部用大写字母表示</li><li>如：final double pi=3.14;</li><li>十进制，如12；八进制要求以0开头，如012；十六进制以0x开头，如0x12</li></ul><p>5、浮点常量</p><ul><li>十进制形式，必须包含小数点 ，如3.14  100.0</li><li>科学计数法，如3.14e2</li><li>如：final double MIN = 3.14E2D;</li></ul><p>6、课后练习<br><a href="https://imgtu.com/i/WpoSzD"><img src="https://z3.ax1x.com/2021/07/11/WpoSzD.png" alt="WpoSzD.png"></a></p><p>示例代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> fist<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InitVar</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span> a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">short</span> b<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> c<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> d<span class="token operator">=</span>40L<span class="token punctuation">;</span>        <span class="token keyword">float</span> e<span class="token operator">=</span><span class="token number">50F</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> f<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> g<span class="token operator">=</span><span class="token string">'A'</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//字符串型</span>        <span class="token keyword">boolean</span> h<span class="token operator">=</span><span class="token boolean">true</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//布尔类型</span>        <span class="token keyword">final</span> <span class="token keyword">double</span> PI<span class="token operator">=</span><span class="token number">3.14</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"字符型,a="</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"字符型,b="</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"整型,c="</span><span class="token operator">+</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"长整型,d="</span><span class="token operator">+</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"单精度,e="</span><span class="token operator">+</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"单精度,f="</span><span class="token operator">+</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"字符变量,g="</span><span class="token operator">+</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"布尔变量,h="</span><span class="token operator">+</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"双精度常量,PI="</span><span class="token operator">+</span>PI<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h1 id="2-4数据类型转换"><a href="#2-4数据类型转换" class="headerlink" title="2.4数据类型转换"></a>2.4数据类型转换</h1><p>1、数据类型主要分两类</p><ul><li><p>自动类型转换</p><ul><li><p>加宽转换</p></li><li><p>系统自动完成</p></li><li><p>整数和浮点型彼此兼容，数值类型和Boolean不兼容</p></li><li><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> fist<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InitVar</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">155</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> b<span class="token operator">=</span><span class="token number">21.0f</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a="</span><span class="token operator">+</span>a<span class="token operator">+</span><span class="token string">",b="</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a/b="</span><span class="token operator">+</span><span class="token punctuation">(</span>a<span class="token operator">/</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li></ul></li></ul><pre><code>    ```    结果a=155,b=21.0，        a/b=7.3809524</code></pre><ul><li><p>强制类型转换</p><ul><li><p>变窄转换</p></li><li><p>显示强制转换</p></li><li><p>浮点型过长，不能转换为整型，对目标取模</p></li><li><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> fist<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InitVar</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a<span class="token punctuation">;</span>        <span class="token keyword">double</span> b<span class="token operator">=</span><span class="token number">34.56</span><span class="token punctuation">;</span>        a<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>b<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li></ul></li></ul><pre><code>    ```    结果34</code></pre><p>2、不会丢失信息的类型转换</p><p>注：从长数据转短数据时，数据存储位数缩小，计算精度下降<br><a href="https://imgtu.com/i/WCX4Wd"><img src="https://z3.ax1x.com/2021/07/12/WCX4Wd.png" alt="WCX4Wd.png"></a></p><p>3、<br>（1）字符串型转数值型<br><a href="https://imgtu.com/i/WCjSln"><img src="https://z3.ax1x.com/2021/07/12/WCjSln.png" alt="WCjSln.png"></a></p><p>（2）数值型转字符串型</p><ul><li><p>用“+”来实现连接操作</p></li><li><p>用“+”来实现自动转换</p></li><li><p>注：某个操作数不是字符串，在连接之前会自动将其转换为字符串</p></li><li><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> fist<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InitVar</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> MyInt <span class="token operator">=</span> <span class="token number">1234</span><span class="token punctuation">;</span>        String myString <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token operator">+</span>MyInt<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myString<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li></ul><pre><code>```结果hello1234</code></pre><p>4、课后练习</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Conversion</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"浮点型:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">double</span> a1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>b1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>c1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>          a1<span class="token operator">=</span><span class="token number">5</span><span class="token operator">/</span><span class="token number">6</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"5/6="</span><span class="token operator">+</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>          b1<span class="token operator">=</span><span class="token number">5.0</span><span class="token operator">/</span><span class="token number">6.0</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"5.0/6.0="</span><span class="token operator">+</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span>          c1<span class="token operator">=</span><span class="token number">5</span><span class="token operator">/</span><span class="token number">6.0</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"5/6.0"</span><span class="token operator">+</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/*          System.out.println("整数型:");          int a2=0,b2=0,c2=0;          a2=5/6;          System.out.println("5/6="+a2);          b2=5.0/6.0;   //有错误，请修改为正确的语句          System.out.println("5.0/6.0="+b2);          c2=5/6.0;          //有错误，请修改为正确的语句          System.out.println("5/6.0="+c2);          */</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>答案</p><pre><code>package fist;public class InitVar &#123;    public static void main(String[] args) &#123;          System.out.println(&quot;浮点型:&quot;);        double a1=0,b1=0,c1=0;        a1=5/6;        System.out.println(&quot;5/6=&quot;+a1);        b1=5.0/6.0;        System.out.println(&quot;5.0/6.0 = &quot;+b1);        c1=5/6.0;        System.out.println(&quot;5/6.0 = &quot;+c1);  &#125;&#125;</code></pre><h1 id="2-5-运算符与表达式"><a href="#2-5-运算符与表达式" class="headerlink" title="2.5 运算符与表达式"></a>2.5 运算符与表达式</h1><p>1、赋值运算符 = </p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> fist<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InitVar</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">;</span>        x<span class="token operator">=</span>y<span class="token operator">=</span>z<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>赋值时“=”两侧数据类型不一致时，按默认转换或强制转换。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//默认转换方式</span><span class="token keyword">package</span> fist<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InitVar</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> i<span class="token operator">=</span>a<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结果100，100.0</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//强制转换方式</span><span class="token keyword">package</span> fist<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InitVar</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">long</span> a<span class="token operator">=</span>100L<span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>a<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结果100,100</span></code></pre><p>== 整型常量赋给byte, short, char等类型变量，要考虑其表数范围</p><p>2、扩展赋值运算符</p><p><a href="https://imgtu.com/i/WEI6Fe"><img src="https://z3.ax1x.com/2021/07/14/WEI6Fe.png" alt="WEI6Fe.png"></a></p><p> 注：“ % ”为取余数  例：7%3=1</p><p> 3、单目运算符<br> <a href="https://imgtu.com/i/WEoZm6"><img src="https://z3.ax1x.com/2021/07/14/WEoZm6.png" alt="WEoZm6.png"></a><br> 注：位置不同，对操作数变量没有影响，却会改变整个表达式的值</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> fist<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InitVar</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> y2<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"x= "</span><span class="token operator">+</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"y2= "</span><span class="token operator">+</span>y2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>结果 x<span class="token operator">=</span> <span class="token number">3</span>，y2<span class="token operator">=</span> <span class="token number">6</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> fist<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InitVar</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> y1<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">++</span>x<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"x="</span><span class="token operator">+</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"y1= "</span><span class="token operator">+</span>y1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>结果x<span class="token operator">=</span><span class="token number">3</span>，y1<span class="token operator">=</span> <span class="token number">9</span></code></pre><p>4、关系运算符</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> fist<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InitVar</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> b<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">==</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2 != 3 所以为false</span>        <span class="token keyword">boolean</span> c<span class="token operator">=</span>x<span class="token operator">&lt;</span>y<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b="</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"c= "</span><span class="token operator">+</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>结果b<span class="token operator">=</span><span class="token boolean">false</span>，c<span class="token operator">=</span> <span class="token boolean">true</span></code></pre><p>5、逻辑运算符<br><a href="https://imgtu.com/i/WEo0pj"><img src="https://z3.ax1x.com/2021/07/14/WEo0pj.png" alt="WEo0pj.png"></a></p><ul><li>u“&amp;”和“|”：非简洁运算符，运算符两边表达式总会被运算执行</li><li>u “&amp;&amp;”和“||”：简洁运算，表达式有可能被忽略,不执行</li></ul><p>6、字符连接运算符</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> fist<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InitVar</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">300</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span>        String s<span class="token operator">=</span><span class="token string">"hello,"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"号"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>结果 hello<span class="token punctuation">,</span><span class="token number">305</span>号</code></pre><p>7、条件运算符</p><ul><li>运算符“？”、“：”</li><li>语法格式 x？y：z</li><li>规则<ul><li>n 若x为假，则整个运算结果为表达式z的值</li><li>n 先计算表达式x的值，若x为真，则整个三目运算的结果为表达式y的值</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> fist<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InitVar</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> k<span class="token operator">=</span>a<span class="token operator">&lt;</span><span class="token number">3</span><span class="token operator">?</span>b<span class="token operator">:</span>c<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>结果<span class="token number">2</span></code></pre><p>8、位运算符</p><p><a href="https://imgtu.com/i/WEoj9H"><img src="https://z3.ax1x.com/2021/07/14/WEoj9H.png" alt="WEoj9H.png"></a></p><p>只对 包括long、int、short、char及byte 有效</p><p>9、其他</p><ul><li>new运算符：用于申请数组存储空间，创建对象</li><li><input disabled="" type="checkbox"> 方括号运算符</li></ul><p>10、什么是表达式</p><ul><li>变量、常量、对象、运算符构成的式子</li></ul><p>11、练习题</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Logic</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> a<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">;</span>        【代码<span class="token number">1</span>】  <span class="token comment" spellcheck="true">//比较数字5是否大于数字6，将结果赋值给a</span>        【代码<span class="token number">2</span>】  <span class="token comment" spellcheck="true">//对变量a进行非运算，将结果赋值给x</span>        【代码<span class="token number">3</span>】  <span class="token comment" spellcheck="true">//对变量a和x进行与运算，将结果赋值给y</span>        【代码<span class="token number">4</span>】  <span class="token comment" spellcheck="true">//对变量x和y进行或运算，将结果赋值给z</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a="</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"x="</span><span class="token operator">+</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"y="</span><span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"z="</span><span class="token operator">+</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>答案</p><pre><code>package fist;public class InitVar &#123;    public static void main(String[] args) &#123;         boolean a,x,y,z;        a=5&gt;6;        x=!a;        y=a&amp;&amp;x;        z=x||y;         System.out.println(&quot;a=&quot;+a);         System.out.println(&quot;x=&quot;+x);         System.out.println(&quot;y=&quot;+y);         System.out.println(&quot;z=&quot;+z);  &#125;&#125;结果a=falsex=truey=falsez=true</code></pre><h1 id="2-6-由键盘输入数据"><a href="#2-6-由键盘输入数据" class="headerlink" title="2.6 由键盘输入数据"></a>2.6 由键盘输入数据</h1><p>1、利用scanner类接收多个数据</p><ul><li><p>对应包：java.util</p></li><li><p>专门用于输入操作</p></li><li><p>创建对象，对象调用nextXXX()方法，从键盘读取</p></li><li><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span></code></pre></li><li><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//例子</span><span class="token keyword">package</span> fist<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InitVar</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">int</span> num1<span class="token punctuation">;</span>        <span class="token keyword">double</span> num2<span class="token punctuation">;</span>        Scanner readerScanner<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入第一个数值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        num1<span class="token operator">=</span>readerScanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入第二个数值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        num2 <span class="token operator">=</span> readerScanner<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//为浮点型</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token operator">*</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>结果请输入第一个数值<span class="token number">5</span>请输入第二个数值<span class="token number">8</span><span class="token number">40.0</span></code></pre></li></ul><pre><code>```</code></pre><p>2、Scanner类方法汇总</p><p><a href="https://imgtu.com/i/Wu6xMt"><img src="https://z3.ax1x.com/2021/07/16/Wu6xMt.png" alt="Wu6xMt.png"></a></p><p>注：其中next（）、nextLine为读取字符串</p><p><a href="https://imgtu.com/i/WucARs"><img src="https://z3.ax1x.com/2021/07/16/WucARs.png" alt="WucARs.png"></a></p><p>例子</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> fist<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InitVar</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         String num1<span class="token punctuation">,</span>num2<span class="token punctuation">;</span>        Scanner readerScanner<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入第一个字符"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        num1<span class="token operator">=</span>readerScanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入第二个字符"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        num2 <span class="token operator">=</span> readerScanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token operator">+</span><span class="token string">"和"</span><span class="token operator">+</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>结果请输入第一个字符a请输入第二个字符qwea和qwe</code></pre><p>3、课后练习</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//加载java.util类库里的所有类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InputNum</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">float</span> b<span class="token operator">=</span><span class="token number">0F</span><span class="token punctuation">;</span>      <span class="token keyword">double</span> c<span class="token operator">=</span><span class="token number">0D</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"从键盘输入一个整数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Scanner buf<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    【代码<span class="token number">1</span>】 <span class="token comment" spellcheck="true">//调用nextInt()方法，并将读入的数赋值给a</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你输入的整数是"</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"从键盘输入一个单精度浮点数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    【代码<span class="token number">2</span>】<span class="token comment" spellcheck="true">//调用nextFloat()方法，并将读入的数赋给b </span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你输入的单精度浮点数是"</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"从键盘输入一个双精度浮点数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    【代码<span class="token number">3</span>】 <span class="token comment" spellcheck="true">//调用nextDouble()，将读入的数赋给c</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你输入的双精度浮点数是"</span><span class="token operator">+</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>答案</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> fist<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InitVar</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>          <span class="token keyword">float</span> b<span class="token operator">=</span><span class="token number">0F</span><span class="token punctuation">;</span>          <span class="token keyword">double</span> c<span class="token operator">=</span><span class="token number">0D</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"从键盘输入一个整数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          Scanner buf<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>          a <span class="token operator">=</span> buf<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//调用nextInt()方法，并将读入的数赋值给a</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"你输入的整数是"</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>               System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"从键盘输入一个单精度浮点数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          b<span class="token operator">=</span>buf<span class="token punctuation">.</span><span class="token function">nextFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用nextFloat()方法，并将读入的数赋给b </span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"你输入的单精度浮点数是"</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"从键盘输入一个双精度浮点数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          c<span class="token operator">=</span>buf<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//调用nextDouble()，将读入的数赋给c</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你输入的双精度浮点数是"</span><span class="token operator">+</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>从键盘输入一个整数：<span class="token number">14</span>你输入的整数是<span class="token number">14</span>从键盘输入一个单精度浮点数：<span class="token number">14</span>你输入的单精度浮点数是<span class="token number">14.0</span>从键盘输入一个双精度浮点数：<span class="token number">12</span>你输入的双精度浮点数是<span class="token number">12.0</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 0基础入门Java </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作列表</title>
      <link href="2021/03/30/cao-zuo-lie-biao/"/>
      <url>2021/03/30/cao-zuo-lie-biao/</url>
      
        <content type="html"><![CDATA[<p>for 语句末尾的冒号 表示是下一行是循环的第一行</p><h3 id="在for循环中执行更多操作"><a href="#在for循环中执行更多操作" class="headerlink" title="在for循环中执行更多操作"></a>在for循环中执行更多操作</h3><pre class=" language-python"><code class="language-python">magicians <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> magicians<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"&amp;#123;i.title()&amp;#125;,hello"</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''outputA,helloB,helloC,hello'''</span></code></pre><p>每个缩进的代码都是循环的一部分</p><pre class=" language-python"><code class="language-python">magicians <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> magicians<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"&amp;#123;i.title()&amp;#125;,hello"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''outputA,hellohiB,hellohiC,hellohi'''</span></code></pre><p>使用迭代对象将单词分开，存入列表中</p><pre class=" language-python"><code class="language-python">list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token string">'python'</span><span class="token punctuation">:</span>    list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''output['p', 'y', 't', 'h', 'o', 'n']'''</span></code></pre><ul><li>通过for 循环实现1+2+3+········+100<pre class=" language-python"><code class="language-python">sum <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  sum<span class="token operator">+=</span>i<span class="token keyword">print</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token string">''</span>'output<span class="token number">4950</span></code></pre></li></ul><p>‘’’</p><pre><code>- （增加缩进）通过for 循环实现1+2+3+········+100```pythonsum = 0for i in range(100):    sum+=i    print(sum)&#39;&#39;&#39;output013610152128&#39;&#39;&#39;</code></pre>]]></content>
      
      
      <categories>
          
          <category> python入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 列表操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Numpy知识点</title>
      <link href="2021/03/21/numpy-zhi-shi-dian/"/>
      <url>2021/03/21/numpy-zhi-shi-dian/</url>
      
        <content type="html"><![CDATA[<h2 id="排序与查询"><a href="#排序与查询" class="headerlink" title="排序与查询"></a>排序与查询</h2><pre class=" language-python"><code class="language-python">numpy<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>data<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> kind<span class="token operator">=</span>None<span class="token punctuation">,</span> order<span class="token operator">=</span>None<span class="token punctuation">)</span></code></pre><h4 id="参数得使用"><a href="#参数得使用" class="headerlink" title="参数得使用"></a>参数得使用</h4><ol><li>data代表你要排列的数组</li><li>axis代表排序方向 0表示按行操作，1按列操作</li><li>排序方法，默认是快速排序</li><li>可自定义字段，按照某个属性进行排序</li></ol><hr><h5 id="创建一维数组"><a href="#创建一维数组" class="headerlink" title="创建一维数组"></a>创建一维数组</h5><pre class=" language-python"><code class="language-python">n <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>             <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>n<span class="token triple-quoted-string string">'''结果array([[1, 4],       [3, 2]])'''</span></code></pre><h5 id="对一维数组进行排序"><a href="#对一维数组进行排序" class="headerlink" title="对一维数组进行排序"></a>对一维数组进行排序</h5><pre class=" language-python"><code class="language-python">np<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>a<span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#按照行进行排序</span><span class="token triple-quoted-string string">'''结果array([[1, 2],       [3, 4]])'''</span></code></pre><pre class=" language-python"><code class="language-python">np<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>a<span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#按照列进行排序</span><span class="token triple-quoted-string string">'''结果array([[1, 4],       [2, 3]])'''</span></code></pre><h5 id="整体进行排序"><a href="#整体进行排序" class="headerlink" title="整体进行排序"></a>整体进行排序</h5><pre class=" language-python"><code class="language-python">np<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>n<span class="token punctuation">,</span>axis<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''结果array([1, 2, 3, 4])'''</span></code></pre><h5 id="使用argsort进行返回排序的值"><a href="#使用argsort进行返回排序的值" class="headerlink" title="使用argsort进行返回排序的值"></a>使用argsort进行返回排序的值</h5><h6 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h6><pre class=" language-python"><code class="language-python">n1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>             <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''结果array([[1, 4, 8],       [3, 5, 2]])'''</span></code></pre><p>对==列==进行排序</p><pre class=" language-python"><code class="language-python">np<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span>n1<span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''结果array([[0, 0, 1],       [1, 1, 0]], dtype=int64)'''</span></code></pre><p>对==行==进行排序</p><pre class=" language-python"><code class="language-python">np<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span>n1<span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''结果array([[0, 1, 2],       [2, 0, 1]], dtype=int64)'''</span></code></pre><p>argsort等，可以获得数组中最大值和最小值</p><h5 id="通过where等方法，获得坐标"><a href="#通过where等方法，获得坐标" class="headerlink" title="通过where等方法，获得坐标"></a>通过where等方法，获得坐标</h5><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 但n1大于5的数值，用坐标显示</span>n1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>             <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>n1 <span class="token operator">=</span> np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>n1<span class="token operator">></span><span class="token number">5</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''output(array([0], dtype=int64), array([2], dtype=int64))坐标（0，2）'''</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 但n2大于3的数值，用坐标显示</span>n1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>n2 <span class="token operator">=</span> np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>n1<span class="token operator">></span><span class="token number">3</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''output(array([0, 0, 1], dtype=int64), array([1, 2, 1], dtype=int64))坐标（0，1），（0，2），（1，1）'''</span></code></pre><p> 将上述的索引取出</p><pre class=" language-python"><code class="language-python">n1<span class="token punctuation">[</span>n2<span class="token punctuation">]</span><span class="token triple-quoted-string string">'''outputarray([4, 8, 5])'''</span></code></pre><p> 若想获得数组最大（小）值的位置—&gt;将数组转换为一个序列</p><pre class=" language-python"><code class="language-python">np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>n1<span class="token punctuation">,</span>axis<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''output2'''</span></code></pre><hr><h2 id="随机数生成器"><a href="#随机数生成器" class="headerlink" title="随机数生成器"></a>随机数生成器</h2><p>在（0，1）之间随机生成一个树</p><pre class=" language-python"><code class="language-python">np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''output0.0061800457731108205'''</span></code></pre><p>随机生成两个数</p><pre class=" language-python"><code class="language-python">np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''outputarray([0.90908575, 0.71877183])'''</span></code></pre><p>在（1，10）之间生成随机整数</p><pre class=" language-python"><code class="language-python">np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span>，<span class="token number">10</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''output6'''</span></code></pre><p>生成随机3*3数组</p><pre class=" language-python"><code class="language-python">np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''outputarray([[0.44630748, 0.50539523, 0.69348314],       [0.97748341, 0.08202103, 0.41141122],       [0.53372942, 0.93059349, 0.56054028]])'''</span></code></pre><p>生成随机3*3整型数组</p><pre class=" language-python"><code class="language-python">np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#1和20表示生成随机数的范围</span><span class="token triple-quoted-string string">'''outputarray([[ 5,  8, 11],       [ 2, 12, 17],       [12, 19,  9]])'''</span></code></pre><p>randn生成10个符合正态分布的随机数</p><pre class=" language-python"><code class="language-python">np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''outputarray([-1.62012578, -0.51265115, -0.15899143,  0.27043991, -1.56441673,       -0.21393424,  0.26953603,  0.74271099, -0.5380142 , -0.27602172])'''</span></code></pre><h6 id="choice方法来随机抽取样本"><a href="#choice方法来随机抽取样本" class="headerlink" title="choice方法来随机抽取样本"></a>choice方法来随机抽取样本</h6><p>numpy.random.choice(a, size=None, replace=True, p=None) </p><ul><li>必须是一维数组</li></ul><table><thead><tr><th>True</th><th>False</th></tr></thead><tbody><tr><td>不放回抽取</td><td>放回抽取，可能回会出现重复值</td></tr></tbody></table><p>从中随机抽取5个数</p><pre class=" language-python"><code class="language-python">np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''outputarray([8, 3, 4, 1, 2])'''</span></code></pre><h6 id="permutation对数组进行重排列"><a href="#permutation对数组进行重排列" class="headerlink" title="permutation对数组进行重排列"></a>permutation对数组进行重排列</h6><p>对数组进行重排列</p><pre class=" language-python"><code class="language-python">np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>permutation<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''outputarray([6, 2, 4, 1, 8, 7, 3, 5])'''</span></code></pre><h6 id="binomial生成二项分布"><a href="#binomial生成二项分布" class="headerlink" title="binomial生成二项分布"></a>binomial生成二项分布</h6><p>生成5个二项分布</p><pre class=" language-python"><code class="language-python">np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>binomial<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">0.3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#0.3表示发生的概率</span><span class="token triple-quoted-string string">'''outputarray([6, 2, 4, 1, 8, 7, 3, 5])'''</span></code></pre><h6 id="chisquare生成卡方分布"><a href="#chisquare生成卡方分布" class="headerlink" title="chisquare生成卡方分布"></a>chisquare生成卡方分布</h6><ol><li><p>卡方分布的定义<br>若n个相互独立的随机变量ξ₁、ξ₂、……、ξn，均服从标准正态分布（也称独立同分布于标准正态分布），则这n个服从标准正态分布的随机变量的平方和Q=∑i=1nξ2i</p></li><li><p>作用</p><ul><li><strong>检验拟合优度</strong>：也就是说可以检验一组给定数据与指定分布的吻合程度。如：用它检验抽奖机收益的观察频数与我们所期望的吻合程度。 </li><li><strong>检验两个变量的独立性</strong>：通过这个方法检查变量之间是否存在某种关系。</li></ul></li><li><p>==卡方检验拟合优度案例==</p><ul><li><strong>期望计算</strong>：期望频数=（观察频数之和（1000）） X （每种结果的概率） 如：-2：977=（0.977）X（1000）</li><li><strong>卡方分布</strong>：检验统计量来比较期望结果和实际结果之间的差别，然后得出观察频数极值的发生概率</li><li><strong>检验统计量</strong>：x2=∑(O−E)2E（O代表观察期望，E代表期望频数）</li></ul><p>即：对于概率分布的每一个概率，取期望频数和实际频数的差，求差的平方数，再除以期望频数，然后将所有结果相加。</p></li><li></li></ol><p>生成3个二项分布</p><pre class=" language-python"><code class="language-python">np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>binomial<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">0.3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#0.3表示发生的概率</span><span class="token triple-quoted-string string">'''outputarray([6, 2, 4, 1, 8, 7, 3, 5])'''</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Numpy知识点 </tag>
            
            <tag> 机器学习基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>列表简介</title>
      <link href="2021/03/05/lie-biao-jian-jie/"/>
      <url>2021/03/05/lie-biao-jian-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是列表"><a href="#什么是列表" class="headerlink" title="什么是列表"></a>什么是列表</h1><p>基本概念 ：按特定顺序排列的元素组成，可以包含字母，数字</p><p>表示方法： [ ] 用逗号分隔其中的元素<br>例; [1,2,3,a,b,c]</p><h1 id="列表的访问"><a href="#列表的访问" class="headerlink" title="列表的访问"></a>列表的访问</h1><pre class=" language-python"><code class="language-python">bicycles <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'list'</span><span class="token punctuation">,</span> <span class="token string">'cannondale'</span><span class="token punctuation">,</span> <span class="token string">'redline'</span><span class="token punctuation">,</span> <span class="token string">'specialized'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>bicycles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><pre><code>list</code></pre><p>索引从0开始</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#例1：访问bicycles列表中第三个元素</span><span class="token keyword">print</span><span class="token punctuation">(</span>bicycles<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><pre><code>redline</code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 例 2：访问bicycles列表最后一个元素</span><span class="token keyword">print</span><span class="token punctuation">(</span>bicycles<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><pre><code>specialized</code></pre><p>使用列表中的各个值</p><pre class=" language-python"><code class="language-python">message <span class="token operator">=</span> f<span class="token string">'I a &amp;#123;bicycles[0]&amp;#125;'</span><span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span></code></pre><pre><code>I a list</code></pre><p>练习3-1：姓名 　将一些朋友的姓名存储在一个列表中，并将其命<br>名为names 。依次访问该列表中的每个元素，从而将每个朋友的姓<br>名打印出来。</p><pre class=" language-python"><code class="language-python">names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token string">'李四'</span><span class="token punctuation">,</span><span class="token string">'王五'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><pre><code>张三李四王五</code></pre><p>练习3-2：问候语 　继续使用练习3-1中的列表，但不打印每个朋友<br>的姓名，而为每人打印一条消息。每条消息都包含相同的问候语，<br>但抬头为相应朋友的姓名。</p><pre class=" language-python"><code class="language-python">message <span class="token operator">=</span> f<span class="token string">'&amp;#123;names[0]&amp;#125; Hi'</span><span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span></code></pre><pre><code>张三 Hi</code></pre><h1 id="修改、添加和删除元素"><a href="#修改、添加和删除元素" class="headerlink" title="修改、添加和删除元素"></a>修改、添加和删除元素</h1><h3 id="修改列表元素"><a href="#修改列表元素" class="headerlink" title="修改列表元素"></a>修改列表元素</h3><pre class=" language-python"><code class="language-python">names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token string">'李四'</span><span class="token punctuation">,</span><span class="token string">'王五'</span><span class="token punctuation">,</span><span class="token string">'乔六'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span></code></pre><pre><code>[&#39;张三&#39;, &#39;李四&#39;, &#39;王五&#39;, &#39;乔六&#39;]</code></pre><pre class=" language-python"><code class="language-python">names<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'曾六'</span><span class="token keyword">print</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span></code></pre><pre><code>[&#39;张三&#39;, &#39;李四&#39;, &#39;王五&#39;, &#39;曾六&#39;]</code></pre><h3 id="列表添加元素"><a href="#列表添加元素" class="headerlink" title="列表添加元素"></a>列表添加元素</h3><pre class=" language-python"><code class="language-python">names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token string">'李四'</span><span class="token punctuation">,</span> <span class="token string">'王五'</span><span class="token punctuation">,</span> <span class="token string">'曾六'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span></code></pre><pre><code>[&#39;张三&#39;, &#39;李四&#39;, &#39;王五&#39;, &#39;曾六&#39;]</code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 在列表末尾添加元素</span>names<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'田七'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span></code></pre><pre><code>[&#39;张三&#39;, &#39;李四&#39;, &#39;王五&#39;, &#39;曾六&#39;, &#39;田七&#39;]</code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 在列表中插入元素</span>names<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'李华'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span></code></pre><pre><code>[&#39;张三&#39;, &#39;李四&#39;, &#39;王五&#39;, &#39;李华&#39;, &#39;曾六&#39;, &#39;田七&#39;]</code></pre><h3 id="列表中删除元素"><a href="#列表中删除元素" class="headerlink" title="列表中删除元素"></a>列表中删除元素</h3><pre class=" language-python"><code class="language-python">names</code></pre><pre><code>[&#39;张三&#39;, &#39;李四&#39;, &#39;王五&#39;, &#39;李华&#39;, &#39;曾六&#39;, &#39;田七&#39;]</code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># del 语句删除元素</span><span class="token keyword">del</span> names<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#3代表位置，不是元素的值</span><span class="token keyword">print</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span></code></pre><pre><code>[&#39;张三&#39;, &#39;李四&#39;, &#39;王五&#39;, &#39;曾六&#39;, &#39;田七&#39;]</code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># pop() 删除元素  删除列表末尾的元素 </span>namesnames_new <span class="token operator">=</span> names<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>names_new<span class="token punctuation">)</span></code></pre><pre><code>[&#39;张三&#39;, &#39;李四&#39;, &#39;王五&#39;, &#39;曾六&#39;]田七</code></pre><p>pop()  可以删除列表中任意位置的元素，在pop()括号中添加元素的索引即可</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># remove()删除元素  </span>names<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'曾六'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span></code></pre><pre><code>[&#39;张三&#39;, &#39;李四&#39;, &#39;王五&#39;]</code></pre><pre class=" language-python"><code class="language-python">names<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#remove() 不能使用位置索引，进行元素的删除</span><span class="token keyword">print</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span></code></pre><pre><code>---------------------------------------------------------------------------ValueError                                Traceback (most recent call last)&lt;ipython-input-13-2196802c970b&gt; in &lt;module&gt;----&gt; 1 names.remove(0)    #remove() 不能使用位置索引，进行元素的删除      2 print(names)ValueError: list.remove(x): x not in list</code></pre><p>练习3-5：修改嘉宾名单 　你刚得知有位嘉宾无法赴约，因此需要另外邀请一位嘉宾。</p><pre class=" language-python"><code class="language-python">names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token string">'李四'</span><span class="token punctuation">,</span> <span class="token string">'王五'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span></code></pre><pre><code>[&#39;张三&#39;, &#39;李四&#39;, &#39;王五&#39;]</code></pre><pre class=" language-python"><code class="language-python">names_1 <span class="token operator">=</span> names<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>names_1<span class="token punctuation">,</span><span class="token string">'无法参加此次活动'</span><span class="token punctuation">)</span></code></pre><pre><code>李四 无法参加此次活动</code></pre><pre class=" language-python"><code class="language-python">name <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'邀请&amp;#123;name&amp;#125;'</span><span class="token punctuation">)</span></code></pre><pre><code>邀请张三</code></pre><p>练习3-6：添加嘉宾 　你刚找到了一个更大的餐桌，可容纳更</p><p>多的嘉宾。请想想你还想邀请哪三位嘉宾。<br>以完成练习3-4或练习3-5时编写的程序为基础</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 使用insert() 将一位新嘉宾添加到名单开头</span>names<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'周二'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span></code></pre><pre><code>[&#39;周二&#39;, &#39;张三&#39;, &#39;王五&#39;]</code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 使用insert() 将另一位新嘉宾添加到名单中间。</span>names<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'李华'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span></code></pre><pre><code>[&#39;周二&#39;, &#39;张三&#39;, &#39;李华&#39;, &#39;王五&#39;]</code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 使用append() 将最后一位新嘉宾添加到名单末尾。</span>names<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'吴八'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span></code></pre><pre><code>[&#39;周二&#39;, &#39;张三&#39;, &#39;李华&#39;, &#39;王五&#39;, &#39;吴八&#39;]</code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 打印一系列消息，向名单中的每位嘉宾发出邀请。</span>name <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'邀请&amp;#123;name&amp;#125;'</span><span class="token punctuation">)</span></code></pre><pre><code>邀请周二</code></pre><pre class=" language-python"><code class="language-python">names<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'田七'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span></code></pre><pre><code>[&#39;周二&#39;, &#39;田七&#39;, &#39;张三&#39;, &#39;李华&#39;, &#39;王五&#39;, &#39;吴八&#39;]</code></pre><h2 id="组织列表"><a href="#组织列表" class="headerlink" title="组织列表"></a>组织列表</h2><h3 id="对列表进行排序-sort-会永久改变列表的顺序"><a href="#对列表进行排序-sort-会永久改变列表的顺序" class="headerlink" title="对列表进行排序 sort()  ,会永久改变列表的顺序"></a>对列表进行排序 sort()  ,会永久改变列表的顺序</h3><p>sort进行排序，会永久修改列表原有的顺序</p><pre class=" language-python"><code class="language-python">data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'banana'</span><span class="token punctuation">,</span><span class="token string">'apple'</span><span class="token punctuation">,</span><span class="token string">'orange'</span><span class="token punctuation">,</span><span class="token string">'grape'</span><span class="token punctuation">]</span>data<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span></code></pre><pre><code>[&#39;apple&#39;, &#39;banana&#39;, &#39;grape&#39;, &#39;orange&#39;]</code></pre><p>若sort()中添加reverse=True ,列表按照反方向排序</p><pre class=" language-python"><code class="language-python">data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'banana'</span><span class="token punctuation">,</span><span class="token string">'apple'</span><span class="token punctuation">,</span><span class="token string">'orange'</span><span class="token punctuation">,</span><span class="token string">'grape'</span><span class="token punctuation">]</span>data<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span></code></pre><pre><code>[&#39;orange&#39;, &#39;grape&#39;, &#39;banana&#39;, &#39;apple&#39;]</code></pre><p>确定列表的长度</p><pre class=" language-python"><code class="language-python">len<span class="token punctuation">(</span>data<span class="token punctuation">)</span></code></pre><h2 id="避免索引错误"><a href="#避免索引错误" class="headerlink" title="避免索引错误"></a>避免索引错误</h2><pre class=" language-python"><code class="language-python">data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'banana'</span><span class="token punctuation">,</span><span class="token string">'apple'</span><span class="token punctuation">,</span><span class="token string">'orange'</span><span class="token punctuation">,</span><span class="token string">'grape'</span><span class="token punctuation">]</span></code></pre><pre class=" language-python"><code class="language-python">data</code></pre><pre><code>[&#39;banana&#39;, &#39;apple&#39;, &#39;orange&#39;, &#39;grape&#39;]</code></pre><pre class=" language-python"><code class="language-python">data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></code></pre><pre><code>&#39;banana&#39;</code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 索引是从0开始</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 仅当列表为空时，访问最后一个元素是会出现错误</span></code></pre><pre class=" language-python"><code class="language-python">data2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>data2</code></pre><pre><code>[]</code></pre><pre class=" language-python"><code class="language-python">data2<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span></code></pre><pre><code>---------------------------------------------------------------------------IndexError                                Traceback (most recent call last)&lt;ipython-input-21-ac47951f10b4&gt; in &lt;module&gt;----&gt; 1 data2[-1]IndexError: list index out of range</code></pre><pre class=" language-python"><code class="language-python"></code></pre>]]></content>
      
      
      <categories>
          
          <category> python编程从入门到实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown的基本使用方法</title>
      <link href="2021/02/04/markdown-shi-yong-shuo-ming/"/>
      <url>2021/02/04/markdown-shi-yong-shuo-ming/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Front-matter-选项详解"><a href="#一、Front-matter-选项详解" class="headerlink" title="一、Front-matter 选项详解"></a>一、Front-matter 选项详解</h2><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr></tbody></table><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 赵奇<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/1.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown<span class="token punctuation">---</span></code></pre><hr><h2 id="二、基本语法"><a href="#二、基本语法" class="headerlink" title="二、基本语法"></a>二、基本语法</h2><table><thead><tr><th>元素</th><th>Markdown 语法</th></tr></thead><tbody><tr><td><a href="https://www.markdown.xyz/basic-syntax/#headings">标题（Heading）</a></td><td><code># H1## H2### H3</code></td></tr><tr><td><a href="https://www.markdown.xyz/basic-syntax/#bold">粗体（Bold）</a></td><td><code>**bold text**</code></td></tr><tr><td><a href="https://www.markdown.xyz/basic-syntax/#italic">斜体（Italic）</a></td><td><code>*italicized text*</code></td></tr><tr><td><a href="https://www.markdown.xyz/basic-syntax/#blockquotes-1">引用块（Blockquote）</a></td><td><code>&gt; blockquote</code></td></tr><tr><td><a href="https://www.markdown.xyz/basic-syntax/#ordered-lists">有序列表（Ordered List）</a></td><td><code>1. First item2. Second item3. Third item</code></td></tr><tr><td><a href="https://www.markdown.xyz/basic-syntax/#unordered-lists">无序列表（Unordered List）</a></td><td><code>- First item- Second item- Third item</code></td></tr><tr><td><a href="https://www.markdown.xyz/basic-syntax/#code">代码（Code）</a></td><td><code>code</code></td></tr><tr><td><a href="https://www.markdown.xyz/basic-syntax/#horizontal-rules">分隔线（Horizontal Rule）</a></td><td><code>---</code></td></tr><tr><td><a href="https://www.markdown.xyz/basic-syntax/#links">链接（Link）</a></td><td><code>[title](https://www.example.com)</code></td></tr><tr><td><a href="https://www.markdown.xyz/basic-syntax/#images">图片（Image）</a></td><td><code>![alt text](image.jpg)</code></td></tr></tbody></table><h2 id="三、基本的语法使用例子"><a href="#三、基本的语法使用例子" class="headerlink" title="三、基本的语法使用例子"></a>三、基本的语法使用例子</h2><h4 id="1、标题（一个-代表一个等级的标题，共有六级标题）"><a href="#1、标题（一个-代表一个等级的标题，共有六级标题）" class="headerlink" title="1、标题（一个#代表一个等级的标题，共有六级标题）"></a><strong>1、标题（一个#代表一个等级的标题，共有六级标题）</strong></h4><h1 id="这是一级标题（-一级标题）"><a href="#这是一级标题（-一级标题）" class="headerlink" title="这是一级标题（# 一级标题）"></a>这是一级标题（# 一级标题）</h1><h2 id="这是二级标题（-二级级标题）"><a href="#这是二级标题（-二级级标题）" class="headerlink" title="这是二级标题（## 二级级标题）"></a>这是二级标题（## 二级级标题）</h2><h3 id="这是三级标题（-三级标题）"><a href="#这是三级标题（-三级标题）" class="headerlink" title="这是三级标题（# 三级标题）"></a>这是三级标题（# 三级标题）</h3><h4 id="2、段落"><a href="#2、段落" class="headerlink" title="2、段落"></a>2、段落</h4><p>使用空白行将一行或多行文本进行分隔，普通段落不能使用空格或者制表符来缩进 。</p><h4 id="3、强调"><a href="#3、强调" class="headerlink" title="3、强调"></a>3、强调</h4><h5 id="粗体"><a href="#粗体" class="headerlink" title="粗体"></a>粗体</h5><ul><li><p>使用 ** 这是文字 **      <strong>这是文字</strong></p></li><li><p>使用__ 这是文字__         <strong>这是文字</strong></p></li></ul><h5 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h5><ul><li>使用 * 这是斜体*         <em>这是斜体</em></li></ul><h5 id="粗体和斜体同时表示"><a href="#粗体和斜体同时表示" class="headerlink" title="粗体和斜体同时表示"></a>粗体和斜体同时表示</h5><ul><li><p>使用 ** * 这是加粗斜体  * * *        *<em>这是加粗斜体**</em></p></li><li><p>使用 __ * 这是加粗 * __     (前后各两条横杠)       <strong><em>这是加粗斜体</em></strong></p><h4 id="4、引用"><a href="#4、引用" class="headerlink" title="4、引用"></a>4、引用</h4></li></ul><p><em>&gt;</em> 表示引用    可以根据不同的层数 添加相应的&gt;</p><blockquote><p>这是一次引用&gt;</p><blockquote><p>这是二次引用&gt;</p><blockquote><p>这是三次引用&gt;</p></blockquote></blockquote></blockquote><h4 id="5、列表"><a href="#5、列表" class="headerlink" title="5、列表"></a>5、列表</h4><h5 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h5><h6 id="使用-单个-表示"><a href="#使用-单个-表示" class="headerlink" title="使用 单个*表示"></a>使用 单个*表示</h6><ul><li><p>无序列表1                * 无序列表1</p></li><li><p>无序列表2                * 无序列表2</p></li></ul><h6 id="使用单个-表示"><a href="#使用单个-表示" class="headerlink" title="使用单个+表示"></a>使用单个+表示</h6><ul><li><p>无序列表1                + 无序列表1</p></li><li><p>无序列表2                 + 无序列表2</p></li></ul><h6 id="使用单个-表示-1"><a href="#使用单个-表示-1" class="headerlink" title="使用单个-表示"></a>使用单个-表示</h6><ul><li>无序列表1        - 无序列表1</li><li>无序列表2        - 无序列表2</li></ul><h5 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h5><p>使用数字紧接着英文句号</p><p>有序列表中包含多个段落，每个项目后面必须缩进 1个制表符（4个空格）</p><ol><li> 踏莎行·小径红稀</li><li> 作者：晏殊</li><li>朝代：宋朝<ol><li>踏莎行·小径红稀原文</li><li>小径红稀，芳郊绿遍。高台树色阴阴见。春风不解禁杨花，蒙蒙乱扑行人面。 翠叶藏莺，朱帘隔燕。炉香静逐游丝转。一场愁梦酒醒时，斜阳却照深深院。</li></ol></li></ol><h4 id="6、代码块"><a href="#6、代码块" class="headerlink" title="6、代码块"></a>6、代码块</h4><p>语法高亮</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"这是Markdown的使用说明"</span><span class="token punctuation">)</span></code></pre><p><img src="https://img.imgdb.cn/item/601c1a073ffa7d37b3920694.png" alt="代码的书写"></p><h4 id="7、-分割线"><a href="#7、-分割线" class="headerlink" title="7、 分割线"></a>7、 分割线</h4><hr><ul><li>***表示分隔线</li><li>– - 表示分割线</li></ul><h4 id="8、超链接"><a href="#8、超链接" class="headerlink" title="8、超链接"></a>8、超链接</h4><pre class=" language-http"><code class="language-http">超链接写作模板[这是我的博客地址](https://wk934530.github.io/ "鼠标悬停在连接时，显示的内容")</code></pre><p><a href="https://wk934530.github.io/" title="鼠标悬停在连接时，显示的内容">这是我的博客地址</a></p><p><img src="https://img.imgdb.cn/item/601c1ea63ffa7d37b394bd47.png" alt="显示提示信息"></p><h4 id="9、-网址和邮箱的显示"><a href="#9、-网址和邮箱的显示" class="headerlink" title="9、 网址和邮箱的显示"></a>9、 网址和邮箱的显示</h4><pre class=" language-html"><code class="language-html">&lt;https://www.baidu.com>    网址的显示&lt;123@163.com>              邮箱显示</code></pre><p><a href="https://www.baidu.com/">https://www.baidu.com</a></p><p><a href="mailto:&#x31;&#x32;&#51;&#64;&#49;&#x36;&#x33;&#46;&#x63;&#111;&#109;">&#x31;&#x32;&#51;&#64;&#49;&#x36;&#x33;&#46;&#x63;&#111;&#109;</a></p><h4 id="10、图片的上传"><a href="#10、图片的上传" class="headerlink" title="10、图片的上传"></a>10、图片的上传</h4><pre class=" language-html"><code class="language-html">![这是我的博客地址](https://wk934530.github.io/ )![图片的信息](图片地址)</code></pre><ul><li><p>使用图床上传图片</p></li><li><p>推荐使用此 <a href="https://www.superbed.cn/">聚合图床</a></p></li></ul><hr><h2 id="四、扩展语法"><a href="#四、扩展语法" class="headerlink" title="四、扩展语法"></a>四、扩展语法</h2><table><thead><tr><th align="left">元素</th><th align="center">Markdown 语法</th></tr></thead><tbody><tr><td align="left"><a href="https://www.markdown.xyz/extended-syntax/#tables">表格（Table）</a></td><td align="center">`</td></tr><tr><td align="left"><a href="https://www.markdown.xyz/extended-syntax/#fenced-code-blocks">代码块（Fenced Code Block）</a></td><td align="center"><code>&#123; &quot;firstName&quot;: &quot;John&quot;, &quot;lastName&quot;: &quot;Smith&quot;, &quot;age&quot;: 25&#125;</code></td></tr><tr><td align="left"><a href="https://www.markdown.xyz/extended-syntax/#footnotes">脚注（Footnote）</a></td><td align="center"><code>Here&#39;s a sentence with a footnote. [^1][^1]: This is the footnote.</code></td></tr><tr><td align="left"><a href="https://www.markdown.xyz/extended-syntax/#heading-ids">标题编号（Heading ID）</a></td><td align="center"><code>### My Great Heading &#123;#custom-id&#125;</code></td></tr><tr><td align="left"><a href="https://www.markdown.xyz/extended-syntax/#definition-lists">定义列表（Definition List）</a></td><td align="center"><code>term: definition</code></td></tr><tr><td align="left"><a href="https://www.markdown.xyz/extended-syntax/#strikethrough">删除线（Strikethrough）</a></td><td align="center"><code>~~The world is flat.~~</code></td></tr><tr><td align="left"><a href="https://www.markdown.xyz/extended-syntax/#task-lists">任务列表（Task List）</a></td><td align="center"><code>- [x] Write the press release- [ ] Update the website- [ ] Contact the media</code></td></tr></tbody></table><h2 id="五、扩展语法的使用"><a href="#五、扩展语法的使用" class="headerlink" title="五、扩展语法的使用"></a>五、扩展语法的使用</h2><h4 id="1、表格"><a href="#1、表格" class="headerlink" title="1、表格"></a>1、表格</h4><p>三个以上的连接符-创建每列的标题</p><p>|分隔每一列</p><pre class=" language-html"><code class="language-html">| Syntax      | Description || ----------- | ----------- || Header      | Title       || Paragraph   | Text        |</code></pre><table><thead><tr><th>Syntax</th><th>Description</th></tr></thead><tbody><tr><td>Header</td><td>Title</td></tr><tr><td>Paragraph</td><td>Text</td></tr></tbody></table><p><strong>对齐方式</strong></p><pre class=" language-html"><code class="language-html">| Syntax      | Description | Test Text     || :---        |    :----:   |          ---: || Header      | Title       | Here's this   || Paragraph   | Text        | And more      |</code></pre><ul><li>:—代表左对齐   </li><li>：—-：代表居中对齐</li></ul><p>注：上述创建表格较为麻烦，建议使用[<a href="https://www.tablesgenerator.com/">Tables Generator</a>]创建表格</p><h4 id="2、脚注"><a href="#2、脚注" class="headerlink" title="2、脚注"></a>2、脚注</h4><p>方括号（<code>[^1]</code>）内添加插入符号和标识符。标识符可以是数字或单词，但不能包含空格或制表符。标识符仅将脚注参考与脚注本身相关联-在输出中，脚注按顺序编号。</p><pre><code>黄鹤楼送孟浩然之广陵作者：李白[^2]朝代：唐朝[^唐朝]黄鹤楼送孟浩然之广陵原文：故人西辞黄鹤楼，烟花三月下扬州。孤帆远影碧空尽，唯见长江天际流。[^2]: 字太白，号青莲居士[^唐朝]:隋末天下群雄并起，617年唐国公李渊于晋阳起兵，次年称帝建立唐朝，定都长安。唐太宗继位后开创贞观之治，为盛唐奠定基础。唐高宗承贞观遗风开创“永徽之治”，并于657年建东都洛阳</code></pre><p> 黄鹤楼送孟浩然之广陵</p><p>作者：李白<a href="%E5%AD%97%E5%A4%AA%E7%99%BD%EF%BC%8C%E5%8F%B7%E9%9D%92%E8%8E%B2%E5%B1%85%E5%A3%AB">^2</a></p><p>朝代：唐朝<a href="%E9%9A%8B%E6%9C%AB%E5%A4%A9%E4%B8%8B%E7%BE%A4%E9%9B%84%E5%B9%B6%E8%B5%B7%EF%BC%8C617%E5%B9%B4%E5%94%90%E5%9B%BD%E5%85%AC%E6%9D%8E%E6%B8%8A%E4%BA%8E%E6%99%8B%E9%98%B3%E8%B5%B7%E5%85%B5%EF%BC%8C%E6%AC%A1%E5%B9%B4%E7%A7%B0%E5%B8%9D%E5%BB%BA%E7%AB%8B%E5%94%90%E6%9C%9D%EF%BC%8C%E5%AE%9A%E9%83%BD%E9%95%BF%E5%AE%89%E3%80%82%E5%94%90%E5%A4%AA%E5%AE%97%E7%BB%A7%E4%BD%8D%E5%90%8E%E5%BC%80%E5%88%9B%E8%B4%9E%E8%A7%82%E4%B9%8B%E6%B2%BB%EF%BC%8C%E4%B8%BA%E7%9B%9B%E5%94%90%E5%A5%A0%E5%AE%9A%E5%9F%BA%E7%A1%80%E3%80%82%E5%94%90%E9%AB%98%E5%AE%97%E6%89%BF%E8%B4%9E%E8%A7%82%E9%81%97%E9%A3%8E%E5%BC%80%E5%88%9B%E2%80%9C%E6%B0%B8%E5%BE%BD%E4%B9%8B%E6%B2%BB%E2%80%9D%EF%BC%8C%E5%B9%B6%E4%BA%8E657%E5%B9%B4%E5%BB%BA%E4%B8%9C%E9%83%BD%E6%B4%9B%E9%98%B3">^唐朝</a></p><ul><li><p>黄鹤楼送孟浩然之广陵原文</p><p>故人西辞黄鹤楼，烟花三月下扬州。孤帆远影碧空尽，唯见长江天际流。</p></li></ul><h4 id="3、删除线"><a href="#3、删除线" class="headerlink" title="3、删除线"></a>3、删除线</h4><p>在单词中心放置一条水平线来删除单词 使用~~</p><p><del>测试文字</del> 这是正文              ~~ 测试文字 ~~ 这是正文</p><h4 id="4、任务清单"><a href="#4、任务清单" class="headerlink" title="4、任务清单"></a>4、任务清单</h4><p>任务列表项之前添加破折号（<code>-</code>）和方括号，并在空格处加上（）<code>[ ]</code>。要选择一个复选框，请<code>x</code>在方括号（<code>[x]</code>）之间添加进去 。</p><pre><code>- [x] 测试1- [ ] 测试2- [ ] 测试3</code></pre><ul><li><input checked="" disabled="" type="checkbox"> 测试1</li><li><input disabled="" type="checkbox"> 测试2</li><li><input disabled="" type="checkbox"> 测试3</li></ul><h2 id="6、说明"><a href="#6、说明" class="headerlink" title="6、说明"></a>6、说明</h2><h4 id="文章参考"><a href="#文章参考" class="headerlink" title="文章参考"></a>文章参考</h4><ul><li><a href="https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=1286100&amp;highlight=markdown">https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=1286100&amp;highlight=markdown</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基本使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>变量和简单数据类型</title>
      <link href="2021/01/28/bian-liang-he-jian-dan-shu-ju-lei-xing-1/"/>
      <url>2021/01/28/bian-liang-he-jian-dan-shu-ju-lei-xing-1/</url>
      
        <content type="html"><![CDATA[<h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><p>同时给多个变量赋值</p><pre class=" language-python"><code class="language-python"> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span></code></pre><pre><code>12</code></pre><p>练习2-8：数字8 　编写四个表达式，分别使用加法、减法、乘法和<br>除法运算，但结果都是数字8。为使用函数调用print() 来显示结<br>果，务必将这些表达式用圆括号括起来</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#2</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#3</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span></code></pre><pre><code>88.08</code></pre>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
            <tag> python 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模型评估与选择</title>
      <link href="2021/01/27/mo-xing-ping-gu-yu-xuan-ze/"/>
      <url>2021/01/27/mo-xing-ping-gu-yu-xuan-ze/</url>
      
        <content type="html"><![CDATA[<h2 id="经验误差与过拟合"><a href="#经验误差与过拟合" class="headerlink" title="经验误差与过拟合"></a>经验误差与过拟合</h2><p>错误率 = 样本分类错误 / 样本总数</p><p>精度 = 1 - 错误率</p><p><strong>过拟合原因</strong>：</p><p>学习能力过于强大，把训练样本所包含的不太一般的特征都学到</p><p><strong>欠拟合原因</strong></p><p>学习能力地下  解决：决策树中扩展分支，在神经网络学习中增加训练次数</p><h2 id="评估方法"><a href="#评估方法" class="headerlink" title="评估方法"></a>评估方法</h2><p><strong><em>一.流出法</em></strong></p><p><strong>1、概念</strong>：留出法直接将数据集D 划分为两个互斥的部分，其中一部分作为训练集S，另一部分用作测试集T 。</p><p><strong>2、方法：</strong>通常训练集和测试集的比例为70%：30%。同时，训练集测试集的划分有两个注意事项：</p><p> ①尽可能保持数据分布的一致性。避免因数据划分过程引入的额外偏差而对最终结果产生影响。在分类任务中，保留类别比例的采样方法称为“分层采样”。</p><p> ②采用若干次随机划分避免单次使用留出法的不稳定性。</p><p><strong>3、例子：</strong></p><p>D为1000样本      S包含700个样本        T包含300个样本  T中有10样本分类错误</p><p>错误率为1 - （10/300）= 10%</p><p>精度 1 - 10% = 90%</p><blockquote><p>训练 / 测试集的划分保持一致</p><p>使用流出法时，采用若干次随机划分，重复进行实验评估后取平均值，作为结果</p></blockquote><p><strong><em>二、交叉验证法</em></strong></p><p><strong>1、概念：</strong>先将数据集D划分为k个大小相似的互斥子集。每一次用k-1个子集的并集作为训练集，剩下的一个子集作为测试集；这样就可以获得k组训练/测试集，从而可进行k次训练和测试，最终返回的是这k个测试结果的均值</p><p><strong>2、方法</strong></p><p>①将数据集随机分为互斥的k个子集，为保证随机性，P次随机划分取平均。</p><p>②将k个子集随机分为k-1个一组剩下一个为另一组，有k种分法。</p><p>③将每一种分组结果中，k-1个子集的组当做训练集，另外一个当做测试集，这样就产生了k次预测，对其取平均</p><p>④ 称为p次k折交叉验证，一般取k=10</p><p><img src="https://www.hualigs.cn/image/60118597cb788.jpg" alt="折交叉验证示意图"></p><p>3、<strong>特殊</strong></p><p>留一法（LOO）</p><p>​    ①假定数据集D中包含m个样本，若令k=m，则为交叉验证法的一个特例，留一法。</p><p>​    ②优点：留一法不受随机样本划分方式的影响，因为m个样本只有唯一的方式划分为m个子集，即每一个子集包含一个样本；留一法使用的训练集与初始数据集相比只少了一个样本，也就是说留一法中被实际评估的模型与期望评估的用D训练出的模型很相似。</p><p>​    ③缺点：在数据集比较大的时候，训练m个模型的计算开销可能是难以忍受的；留一法的估计结果也未必永远比其他评估方法准确。</p><p><strong><em>三、自助法</em></strong></p><p><strong>1、概念：</strong> 多次重复的抽取</p><p><strong>2、使用方法</strong> ：初始数据集D中约有36.8%的样本未出现在样本数据集T中，将T作为训练集</p><p><strong>3、适用范围</strong> ：数据量较少 ，难以划分</p><h3 id="调参与最终模型"><a href="#调参与最终模型" class="headerlink" title="调参与最终模型"></a>调参与最终模型</h3><ol><li><p>算法参数的设置</p></li><li><p>学习算法的很多参数实在实数范围内取值</p></li></ol><h2 id="性能度量"><a href="#性能度量" class="headerlink" title="性能度量"></a>性能度量</h2>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 机器学习-周志华 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习（第一章）</title>
      <link href="2021/01/25/test/"/>
      <url>2021/01/25/test/</url>
      
        <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p><strong>什么是机器学习？</strong></p><p>利用经验来改善系统自身的性能</p><p><strong>什么是样本</strong></p><p>每条记录是关于一个事件或对象（例如：西瓜的色泽、敲声等）描述</p><p><strong>特征向量</strong></p><p>将事件或对象的属性值展开作为三维坐标，则构成事件的三维坐标</p><p><strong>两个学习类型</strong></p><p>预测为离散值  →  分类学习</p><p>预测为连续性  →  回归学习</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/01/18/hello-world/"/>
      <url>2021/01/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
